{
  "name": "node-json-db",
  "version": "0.7.3",
  "description": "Database using JSON file as storage for Node.JS",
  "main": "./JsonDB.js",
  "scripts": {
    "test": "mocha test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:Belphemur/node-json-db.git"
  },
  "keywords": [
    "database",
    "json",
    "db"
  ],
  "author": {
    "name": "Antoine Aflalo",
    "email": "antoineaf+npm@admincmd.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Belphemur/node-json-db/issues"
  },
  "homepage": "https://github.com/Belphemur/node-json-db",
  "dependencies": {
    "mkdirp": "0.5.x"
  },
  "devDependencies": {
    "mocha": "2.4.x",
    "expect.js": "0.3.x",
    "grunt": "0.4.x",
    "grunt-cli": "0.1.x",
    "grunt-contrib-jshint": "0.11.x",
    "grunt-simple-mocha": "0.4.x"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/Belphemur/node-json-db.png?branch=master)](http://travis-ci.org/Belphemur/node-json-db) [![Coverage Status](https://img.shields.io/coveralls/Belphemur/node-json-db.svg)](https://coveralls.io/r/Belphemur/node-json-db?branch=master)\r\n\r\n[![NPM](https://nodei.co/npm/node-json-db.png?downloads=true&stars=true)](https://nodei.co/npm/node-json-db/)\r\n\r\n> A simple \"database\" that use JSON file for Node.JS.\r\n\r\n## Installation\r\nAdd `node-json-db` to your existing Node.js project.\r\n```bash\r\nnpm install node-json-db --save\r\n```\r\n## Inner Working\r\n\r\n### Data\r\nThe module store the data using JavaScript Object directly into a JSON file. You can easily traverse the data to reach \r\ndirectly the interesting property using the DataPath. The principle of DataPath is the same as XMLPath.\r\n\r\n### Example\r\n```javascript\r\n{\r\n    test: {\r\n        data1 : {\r\n            array : ['test','array']\r\n        },\r\n        data2 : 5\r\n    }\r\n}\r\n```\r\nIf you want to fetch the value of array, the DataPath is **/test/data1/array**\r\nTo reach the value of data2 : **/test/data2**\r\nYou can of course get also the full object **test** : **/test**\r\nOr even the root : **/**\r\n## Usage\r\nSee [test](https://github.com/Belphemur/node-json-db/tree/master/test) for more usage details.\r\n\r\n\r\n```javascript\r\nvar JsonDB = require('node-json-db');\r\n//The second argument is used to tell the DB to save after each push\r\n//If you put false, you'll have to call the save() method.\r\n//The third argument is to ask JsonDB to save the database in an human readable format. (default false)\r\nvar db = new JsonDB(\"myDataBase\", true, false);\r\n\r\n//Pushing the data into the database\r\n//With the wanted DataPath\r\n//By default the push will override the old value\r\ndb.push(\"/test1\",\"super test\");\r\n\r\n//It also create automatically the hierarchy when pushing new data for a DataPath that doesn't exists\r\ndb.push(\"/test2/my/test\",5);\r\n\r\n//You can also push directly objects\r\ndb.push(\"/test3\", {test:\"test\", json: {test:[\"test\"]}});\r\n\r\n//If you don't want to override the data but to merge them\r\n//The merge is recursive and work with Object and Array.\r\ndb.push(\"/test3\", {new:\"cool\", json: {important : 5}}, false);\r\n/*\r\nThis give you this results :\r\n{\r\n   \"test\":\"test\",\r\n   \"json\":{\r\n      \"test\":[\r\n         \"test\"\r\n      ],\r\n      \"important\":5\r\n   },\r\n   \"new\":\"cool\"\r\n}\r\n*/\r\n//You can't merge primitive.\r\n//If you do this:\r\ndb.push(\"/test2/my/test/\",10,false);\r\n//the data will be overriden\r\n\r\n//Get the data from the root\r\nvar data = db.getData(\"/\");\r\n\r\n//From a particular DataPath\r\nvar data = db.getData(\"/test1\");\r\n\r\n//If you try to get some data from a DataPath that doesn't exists\r\n//You'll get an Error\r\ntry {\r\nvar data = db.getData(\"/test1/test/dont/work\");\r\n} catch(error) {\r\n//The error will tell you where the DataPath stopped. In this case test1\r\n//Since /test1/test does't exist.\r\n    console.error(error);\r\n}\r\n\r\n//Deleting data\r\ndb.delete(\"/test1\");\r\n\r\n//Save the data (useful if you disable the saveOnPush)\r\ndb.save();\r\n\r\n//In case you have a exterior change to the databse file and want to reload it\r\n//use this method\r\ndb.reload();\r\n\r\n```\r\n\r\n### Array Support\r\nYou can also access the information stored into arrays and manipulate them.\r\n```javascript\r\nvar JsonDB = require('node-json-db');\r\n//The second argument is used to tell the DB to save after each push\r\n//If you put false, you'll have to call the save() method.\r\n//The third argument is to ask JsonDB to save the database in an human readable format. (default false)\r\nvar db = new JsonDB(\"myDataBase\", true, false);\r\n\r\n//This will create an array 'myarray' with the object '{obj:'test'}' at index 0\r\ndb.push(\"/arraytest/myarray[0]\", {obj:'test'}, true);\r\n\r\n//You can retrieve a property of an object included in an array\r\n//testString = 'test';\r\nvar testString = db.getData(\"/arraytest/myarray[0]/obj\");\r\n\r\n//Doing this will delete the object stored at the index 0 of the array.\r\n//Keep in mind this won't delete the array even if it's empty.\r\ndb.delete((\"/arraytest/myarray[0]\");\r\n```\r\n\r\n#### Appending in Array\r\n```javascript\r\n//You can also easily append new item to an existing array\r\n//This set the next index with {obj: 'test'}\r\ndb.push(\"/arraytest/myarray[]\", {obj:'test'}, true);\r\n\r\n\r\n//The append feature can be used in conjuction with properties\r\n//This will set the next index as an object {myTest: 'test'}\r\ndb.push(\"/arraytest/myarray[]/myTest\", 'test', true);\r\n```\r\n\r\n#### Last Item in Array\r\n```javascript\r\n// Add basic array\r\ndb.push(\"/arraytest/lastItemArray\", [1, 2, 3], true);\r\n\r\n//You can easily get the last item of the array with the index -1\r\n//This will return 3\r\ndb.getData(\"/arraytest/lastItemArray[-1]\");\r\n\r\n\r\n//You can delete the last item of an array with -1\r\n//This will remove the integer \"3\" from the array\r\ndb.delete(\"/arraytest/lastItemArray[-1]\");\r\n\r\n//This will return 2 since 3 just got removed\r\ndb.getData(\"/arraytest/lastItemArray[-1]\");\r\n```\r\n### Exception/Error\r\n#### Type\r\n\r\n| Type          |                   Explanation                                    |\r\n| ------------- |:----------------------------------------------------------------:|\r\n| DataError     | When the error is linked to the Data Given                       | \r\n| DatabaseError | Linked to a problem with the loading or saving of the Database.  |\r\n\r\n#### Errors\r\n\r\n| Error                                                 | Type          |                   Explanation                                                                                                                                             |\r\n| ------------------------------------------------------|:-------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|The Data Path can't be empty                           |DataError      |The Database expect to minimum receive the root **/** as DataPath.                                                                                                         | \r\n|Can't find dataPath: /XXX. Stopped at YYY              |DataError      |When the full hierarchy of the DataPath given is not present in the Database. It tells you until where it's valid. This error can happen when using *getData* and *delete* | \r\n|Can't merge another type of data with an Array         |DataError      |If you chose to not override the data (merging) when pushing and the new data is an array but the current data isn't an array (an Object by example).                      | \r\n|Can't merge an Array with an Object                    |DataError      |Same idea as the previous message. You have an array as current data and ask to merge it with an Object.                                                                   | \r\n|DataPath: /XXX.  YYY is not an array.                  |DataError      |When trying to access an object as an array.                                                                                                                               | \r\n|DataPath: /XXX. Can't find index INDEX in array YYY    |DataError      |When trying to access a non-existent index in the array.                                                                                                                   | \r\n|Only numerical values accepted for array index         |DataError      |An array can only use number for its indexes. For this use the normal object.                                                                                                            |\r\n|Can't Load Database:  XXXX                             |DatabaseError  |JsonDB can't load the database for \"err\" reason. You can find the nested error in **error.inner**                                                                          |\r\n|Can't save the database: XXX                           |DatabaseError  |JsonDB can't save the database for \"err\" reason. You can find the nested error in **error.inner**                                                                          | \r\n|DataBase not loaded. Can't write                       |DatabaseError  |Since the database hasn't been loaded correctly, the module won't let you save the data to avoid erasing your database.                                                    | \r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "node-json-db@0.7.3",
  "_from": "node-json-db@^0.7.3"
}
